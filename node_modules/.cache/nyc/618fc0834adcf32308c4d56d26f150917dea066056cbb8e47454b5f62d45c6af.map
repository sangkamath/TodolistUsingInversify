{"version":3,"file":"/Users/sangeethak/Downloads/inversify-express-example-master/MongoDB/service/user.ts","sources":["/Users/sangeethak/Downloads/inversify-express-example-master/MongoDB/service/user.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,uCAA+C;AAC/C,kDAAwD;AAExD,2CAAsC;AAGtC;IAGE,qBAC+B,WAA0B;QAEvD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,8BAAQ,GAAf;QAAA,iBAMC;QALC,OAAO,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;YACzC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,UAAC,KAAK,EAAE,IAAY;gBACpD,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,6BAAO,GAAd,UAAe,EAAU;QAAzB,iBAMC;QALC,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,EAAE,UAAC,KAAK,EAAE,IAAU;gBACzD,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,6BAAO,GAAd,UAAe,IAAU;QAAzB,iBAMC;QALC,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,UAAC,KAAK,EAAE,IAAU;gBACtD,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAU,GAAjB,UAAkB,EAAU,EAAE,IAAU;QAAxC,iBAMC;QALC,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,UAAC,KAAK,EAAE,IAAU;gBAC1D,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAU,GAAjB,UAAkB,EAAU;QAA5B,iBAMC;QALC,OAAO,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACtC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,EAAE,UAAC,KAAK,EAAE,IAAS;gBACnD,OAAO,CAAC,IAAI,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IA/CU,WAAW;QADvB,sBAAU,EAAE;QAKR,WAAA,kBAAM,CAAC,eAAK,CAAC,aAAa,CAAC,CAAA;yCAAc,sBAAa;OAJ9C,WAAW,CAgDvB;IAAD,kBAAC;CAAA,AAhDD,IAgDC;AAhDY,kCAAW","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { MongoDBClient } from '../utils/mongodb/client';\nimport { User } from '../models/user';\nimport TYPES from '../constant/types';\n\n@injectable()\nexport class UserService {\n  private mongoClient: MongoDBClient;\n\n  constructor(\n    @inject(TYPES.MongoDBClient) mongoClient: MongoDBClient\n  ) {\n    this.mongoClient = mongoClient;\n  }\n\n  public getUsers(): Promise<User[]> {\n    return new Promise<User[]>((resolve, reject) => {\n      this.mongoClient.find('user', {}, (error, data: User[]) => {\n        resolve(data);\n      });\n    });\n  }\n\n  public getUser(id: string): Promise<User> {\n    return new Promise<User>((resolve, reject) => {\n      this.mongoClient.findOneById('user', id, (error, data: User) => {\n        resolve(data);\n      });\n    });\n  }\n\n  public newUser(user: User): Promise<User> {\n    return new Promise<User>((resolve, reject) => {\n      this.mongoClient.insert('user', user, (error, data: User) => {\n        resolve(data);\n      });\n    });\n  }\n\n  public updateUser(id: string, user: User): Promise<User> {\n    return new Promise<User>((resolve, reject) => {\n      this.mongoClient.update('user', id, user, (error, data: User) => {\n        resolve(data);\n      });\n    });\n  }\n\n  public deleteUser(id: string): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.mongoClient.remove('user', id, (error, data: any) => {\n        resolve(data);\n      });\n    });\n  }\n}\n"]}