"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var default_settings_1 = require("./config/default_settings");
var console_renderer_1 = require("./renderers/console_renderer");
var request_reducer_1 = require("./reducers/request_reducer");
var text_serializer_1 = require("./serializers/text/text_serializer");
exports.textSerializer = text_serializer_1.default;
var utils_1 = require("./utils/utils");
var utils_2 = require("./utils/utils");
function makeLoggerMiddleware(settings, renderer) {
    var logger = function (next) {
        if (settings === undefined || settings === null) {
            settings = default_settings_1.default;
        }
        if (renderer === undefined || renderer === null) {
            renderer = console_renderer_1.default;
        }
        return function (args) {
            var results = null;
            var logEntry = {
                error: false,
                exception: null,
                guid: utils_1.guid(),
                multiInject: args.isMultiInject,
                results: [],
                rootRequest: null,
                serviceIdentifier: args.serviceIdentifier,
                time: null
            };
            var nextContextInterceptor = args.contextInterceptor;
            args.contextInterceptor = function (context) {
                logEntry.rootRequest = request_reducer_1.default(context.plan.rootRequest, settings.request);
                return nextContextInterceptor(context);
            };
            try {
                var start = utils_2.getTime();
                results = next(args);
                var end = utils_2.getTime();
                logEntry.results = results;
                logEntry.time = (settings.time) ? utils_2.getTimeDiference(start, end) : null;
            }
            catch (e) {
                logEntry.error = true;
                logEntry.exception = e;
                logEntry.time = null;
            }
            renderer(logEntry);
            if (results) {
                return results;
            }
            else {
                throw new Error(logEntry.exception.message);
            }
        };
    };
    return logger;
}
exports.makeLoggerMiddleware = makeLoggerMiddleware;
