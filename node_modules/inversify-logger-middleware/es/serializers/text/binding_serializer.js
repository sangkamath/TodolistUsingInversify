import { getServiceIdentifierAsString } from "inversify";
import { getIndentationForDepth, makePropertyLogger } from "./text_serializer_utils";
function serializeBinding(textEntry, depth, binding) {
    var indentation = getIndentationForDepth(depth);
    var propertyLogger = makePropertyLogger(indentation);
    var props = [
        "type", "serviceIdentifier", "implementationType",
        "activated", "cache", "constraint", "dynamicValue",
        "factory", "onActivation", "provider", "scope"
    ];
    var _b = binding;
    props.forEach(function (prop) {
        if (_b[prop] !== undefined) {
            var val = _b[prop];
            switch (prop) {
                case "implementationType":
                    val = _b[prop] && _b[prop].name;
                    break;
                case "serviceIdentifier":
                    val = getServiceIdentifierAsString(_b[prop]);
                    break;
                default:
                    val = _b[prop];
            }
            textEntry = propertyLogger(textEntry, 3, prop, val);
        }
    });
    return textEntry;
}
export default serializeBinding;
